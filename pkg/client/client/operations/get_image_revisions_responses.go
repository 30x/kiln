package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/30x/shipyard/pkg/client/models"
)

// GetImageRevisionsReader is a Reader for the GetImageRevisions structure.
type GetImageRevisionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetImageRevisionsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetImageRevisionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetImageRevisionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetImageRevisionsOK creates a GetImageRevisionsOK with default headers values
func NewGetImageRevisionsOK() *GetImageRevisionsOK {
	return &GetImageRevisionsOK{}
}

/*GetImageRevisionsOK handles this case with default header values.

The request was for a valid repository and application
*/
type GetImageRevisionsOK struct {
	Payload []*models.Image
}

func (o *GetImageRevisionsOK) Error() string {
	return fmt.Sprintf("[GET /{repository}/apps/{application}/images][%d] getImageRevisionsOK  %+v", 200, o.Payload)
}

func (o *GetImageRevisionsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageRevisionsNotFound creates a GetImageRevisionsNotFound with default headers values
func NewGetImageRevisionsNotFound() *GetImageRevisionsNotFound {
	return &GetImageRevisionsNotFound{}
}

/*GetImageRevisionsNotFound handles this case with default header values.

The request was for a repository or application that does not exist
*/
type GetImageRevisionsNotFound struct {
	Payload *models.Error
}

func (o *GetImageRevisionsNotFound) Error() string {
	return fmt.Sprintf("[GET /{repository}/apps/{application}/images][%d] getImageRevisionsNotFound  %+v", 404, o.Payload)
}

func (o *GetImageRevisionsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

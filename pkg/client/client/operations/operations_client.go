package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new operations API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
CreateApplication Create an image of the specified revision
*/
func (a *Client) CreateApplication(params *CreateApplicationParams) (*CreateApplicationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "createApplication",
		Method:             "POST",
		PathPattern:        "/{repository}/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApplicationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateApplicationCreated), nil
}

/*
GetAllApplications Get all applications for this repository
*/
func (a *Client) GetAllApplications(params *GetAllApplicationsParams) (*GetAllApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllApplicationsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getAllApplications",
		Method:             "GET",
		PathPattern:        "/{repository}/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllApplicationsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllApplicationsOK), nil
}

/*
GetImage Get the image for the specfied revision of the application within the repo
*/
func (a *Client) GetImage(params *GetImageParams) (*GetImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getImage",
		Method:             "GET",
		PathPattern:        "/{repository}/apps/{application}/images/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageOK), nil
}

/*
GetImageRevisions Get all built images for the application in the repository
*/
func (a *Client) GetImageRevisions(params *GetImageRevisionsParams) (*GetImageRevisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageRevisionsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getImageRevisions",
		Method:             "GET",
		PathPattern:        "/{repository}/apps/{application}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageRevisionsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageRevisionsOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/30x/shipyard/pkg/client/models"
)

// CreateApplicationReader is a Reader for the CreateApplication structure.
type CreateApplicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *CreateApplicationReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateApplicationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewCreateApplicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateApplicationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateApplicationCreated creates a CreateApplicationCreated with default headers values
func NewCreateApplicationCreated() *CreateApplicationCreated {
	return &CreateApplicationCreated{}
}

/*CreateApplicationCreated handles this case with default header values.

The request was for a valid repo, application, and image.  The image was created
*/
type CreateApplicationCreated struct {
	Payload *models.Image
}

func (o *CreateApplicationCreated) Error() string {
	return fmt.Sprintf("[POST /{repository}/applications][%d] createApplicationCreated  %+v", 201, o.Payload)
}

func (o *CreateApplicationCreated) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateApplicationNotFound creates a CreateApplicationNotFound with default headers values
func NewCreateApplicationNotFound() *CreateApplicationNotFound {
	return &CreateApplicationNotFound{}
}

/*CreateApplicationNotFound handles this case with default header values.

The repository and application does not exist
*/
type CreateApplicationNotFound struct {
	Payload *models.Error
}

func (o *CreateApplicationNotFound) Error() string {
	return fmt.Sprintf("[POST /{repository}/applications][%d] createApplicationNotFound  %+v", 404, o.Payload)
}

func (o *CreateApplicationNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateApplicationConflict creates a CreateApplicationConflict with default headers values
func NewCreateApplicationConflict() *CreateApplicationConflict {
	return &CreateApplicationConflict{}
}

/*CreateApplicationConflict handles this case with default header values.

Application and image already exists
*/
type CreateApplicationConflict struct {
	Payload *models.Error
}

func (o *CreateApplicationConflict) Error() string {
	return fmt.Sprintf("[POST /{repository}/applications][%d] createApplicationConflict  %+v", 409, o.Payload)
}

func (o *CreateApplicationConflict) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

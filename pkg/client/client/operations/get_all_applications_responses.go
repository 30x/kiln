package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/30x/shipyard/pkg/client/models"
)

// GetAllApplicationsReader is a Reader for the GetAllApplications structure.
type GetAllApplicationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetAllApplicationsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAllApplicationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetAllApplicationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllApplicationsOK creates a GetAllApplicationsOK with default headers values
func NewGetAllApplicationsOK() *GetAllApplicationsOK {
	return &GetAllApplicationsOK{}
}

/*GetAllApplicationsOK handles this case with default header values.

The request was for a repository and applications exist within that repository
*/
type GetAllApplicationsOK struct {
	Payload []*models.Application
}

func (o *GetAllApplicationsOK) Error() string {
	return fmt.Sprintf("[GET /{repository}/applications][%d] getAllApplicationsOK  %+v", 200, o.Payload)
}

func (o *GetAllApplicationsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllApplicationsNotFound creates a GetAllApplicationsNotFound with default headers values
func NewGetAllApplicationsNotFound() *GetAllApplicationsNotFound {
	return &GetAllApplicationsNotFound{}
}

/*GetAllApplicationsNotFound handles this case with default header values.

The request was for a repository that does not exist
*/
type GetAllApplicationsNotFound struct {
	Payload *models.Error
}

func (o *GetAllApplicationsNotFound) Error() string {
	return fmt.Sprintf("[GET /{repository}/applications][%d] getAllApplicationsNotFound  %+v", 404, o.Payload)
}

func (o *GetAllApplicationsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

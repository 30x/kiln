package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetAllApplicationsHandlerFunc turns a function with the right signature into a get all applications handler
type GetAllApplicationsHandlerFunc func(GetAllApplicationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllApplicationsHandlerFunc) Handle(params GetAllApplicationsParams) middleware.Responder {
	return fn(params)
}

// GetAllApplicationsHandler interface for that can handle valid get all applications params
type GetAllApplicationsHandler interface {
	Handle(GetAllApplicationsParams) middleware.Responder
}

// NewGetAllApplications creates a new http.Handler for the get all applications operation
func NewGetAllApplications(ctx *middleware.Context, handler GetAllApplicationsHandler) *GetAllApplications {
	return &GetAllApplications{Context: ctx, Handler: handler}
}

/*GetAllApplications swagger:route GET /{repository}/applications getAllApplications

Get all applications for this repository

*/
type GetAllApplications struct {
	Context *middleware.Context
	Handler GetAllApplicationsHandler
}

func (o *GetAllApplications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAllApplicationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

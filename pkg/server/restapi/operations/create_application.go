package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// CreateApplicationHandlerFunc turns a function with the right signature into a create application handler
type CreateApplicationHandlerFunc func(CreateApplicationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateApplicationHandlerFunc) Handle(params CreateApplicationParams) middleware.Responder {
	return fn(params)
}

// CreateApplicationHandler interface for that can handle valid create application params
type CreateApplicationHandler interface {
	Handle(CreateApplicationParams) middleware.Responder
}

// NewCreateApplication creates a new http.Handler for the create application operation
func NewCreateApplication(ctx *middleware.Context, handler CreateApplicationHandler) *CreateApplication {
	return &CreateApplication{Context: ctx, Handler: handler}
}

/*CreateApplication swagger:route POST /{repository}/applications createApplication

Create an image of the specified revision

*/
type CreateApplication struct {
	Context *middleware.Context
	Handler CreateApplicationHandler
}

func (o *CreateApplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateApplicationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

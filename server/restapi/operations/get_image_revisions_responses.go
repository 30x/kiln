package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/30x/shipyard/server/models"
)

/*GetImageRevisionsOK The request was for a valid repository and application

swagger:response getImageRevisionsOK
*/
type GetImageRevisionsOK struct {

	// In: body
	Payload []*models.Image `json:"body,omitempty"`
}

// NewGetImageRevisionsOK creates GetImageRevisionsOK with default headers values
func NewGetImageRevisionsOK() *GetImageRevisionsOK {
	return &GetImageRevisionsOK{}
}

// WithPayload adds the payload to the get image revisions o k response
func (o *GetImageRevisionsOK) WithPayload(payload []*models.Image) *GetImageRevisionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image revisions o k response
func (o *GetImageRevisionsOK) SetPayload(payload []*models.Image) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageRevisionsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetImageRevisionsNotFound The request was for a repository or application that does not exist

swagger:response getImageRevisionsNotFound
*/
type GetImageRevisionsNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetImageRevisionsNotFound creates GetImageRevisionsNotFound with default headers values
func NewGetImageRevisionsNotFound() *GetImageRevisionsNotFound {
	return &GetImageRevisionsNotFound{}
}

// WithPayload adds the payload to the get image revisions not found response
func (o *GetImageRevisionsNotFound) WithPayload(payload *models.Error) *GetImageRevisionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image revisions not found response
func (o *GetImageRevisionsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageRevisionsNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

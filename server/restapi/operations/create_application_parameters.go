package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewCreateApplicationParams creates a new CreateApplicationParams object
// with the default values initialized.
func NewCreateApplicationParams() CreateApplicationParams {
	var ()
	return CreateApplicationParams{}
}

// CreateApplicationParams contains all the bound params for the create application operation
// typically these are obtained from a http.Request
//
// swagger:parameters createApplication
type CreateApplicationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The Application name
	  Required: true
	  In: formData
	*/
	Application string
	/*The file data as a multipart
	  Required: true
	  In: formData
	*/
	File strfmt.Base64
	/*The Docker repository name
	  Required: true
	  In: path
	*/
	Repository string
	/*The Revision of the image
	  Required: true
	  In: formData
	*/
	Revision string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CreateApplicationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := httpkit.Values(r.Form)

	fdApplication, fdhkApplication, _ := fds.GetOK("application")
	if err := o.bindApplication(fdApplication, fdhkApplication, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFile, fdhkFile, _ := fds.GetOK("file")
	if err := o.bindFile(fdFile, fdhkFile, route.Formats); err != nil {
		res = append(res, err)
	}

	rRepository, rhkRepository, _ := route.Params.GetOK("repository")
	if err := o.bindRepository(rRepository, rhkRepository, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRevision, fdhkRevision, _ := fds.GetOK("revision")
	if err := o.bindRevision(fdRevision, fdhkRevision, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateApplicationParams) bindApplication(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("application", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("application", "formData", raw); err != nil {
		return err
	}

	o.Application = raw

	return nil
}

func (o *CreateApplicationParams) bindFile(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("file", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("file", "formData", raw); err != nil {
		return err
	}

	value, err := formats.Parse("byte", raw)
	if err != nil {
		return errors.InvalidType("file", "formData", "strfmt.Base64", raw)
	}
	o.File = *(value.(*strfmt.Base64))

	return nil
}

func (o *CreateApplicationParams) bindRepository(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Repository = raw

	return nil
}

func (o *CreateApplicationParams) bindRevision(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("revision", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("revision", "formData", raw); err != nil {
		return err
	}

	o.Revision = raw

	return nil
}

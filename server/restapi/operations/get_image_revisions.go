package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetImageRevisionsHandlerFunc turns a function with the right signature into a get image revisions handler
type GetImageRevisionsHandlerFunc func(GetImageRevisionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetImageRevisionsHandlerFunc) Handle(params GetImageRevisionsParams) middleware.Responder {
	return fn(params)
}

// GetImageRevisionsHandler interface for that can handle valid get image revisions params
type GetImageRevisionsHandler interface {
	Handle(GetImageRevisionsParams) middleware.Responder
}

// NewGetImageRevisions creates a new http.Handler for the get image revisions operation
func NewGetImageRevisions(ctx *middleware.Context, handler GetImageRevisionsHandler) *GetImageRevisions {
	return &GetImageRevisions{Context: ctx, Handler: handler}
}

/*GetImageRevisions swagger:route GET /{repository}/apps/{application}/images getImageRevisions

Get all built images for the application in the repository

*/
type GetImageRevisions struct {
	Context *middleware.Context
	Handler GetImageRevisionsHandler
}

func (o *GetImageRevisions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetImageRevisionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

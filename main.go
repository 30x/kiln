package main

import (
	"os"
	"strconv"
	"time"

	"github.com/30x/shipyard/pkg/server"
	"github.com/30x/shipyard/pkg/shipyard"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	portString := os.Getenv("PORT")

	if portString == "" {
		shipyard.LogError.Fatal("You must specifiy the PORT environment variable")
	}

	port, err := strconv.Atoi(portString)

	if err != nil {
		shipyard.LogError.Fatal("You must specify a valid integer for the PORT value")
	}

	timeoutString := os.Getenv("SHUTDOWN_TIMEOUT")

	if timeoutString == "" {
		shipyard.LogError.Fatal("You must specifiy the SHUTDOWN_TIMEOUT environment variable")
	}

	timeout, err := strconv.Atoi(timeoutString)

	if err != nil {
		shipyard.LogError.Fatal("You must specify a valid integer for the SHUTDOWN_TIMEOUT value")
	}
	imageCreator, err := shipyard.NewImageCreatorFromEnv()

	//we should die here if we're unable to start
	if err != nil {
		shipyard.LogError.Fatalf("Unable to create image creator %s", err)
	}

	podSpec, err := shipyard.NewPodSpecIoFromEnv()

	if err != nil {
		shipyard.LogError.Fatalf("Unable to create pod spec provider.  Error is %s", err)
	}

	reaperIntervalString := os.Getenv("REAP_INTERVAL")

	if reaperIntervalString == "" {
		shipyard.LogError.Fatal("You must specifiy the REAP_INTERVAL environment variable")
	}

	reaperInterval, err := strconv.Atoi(reaperIntervalString)

	if err != nil {
		shipyard.LogError.Fatal("You must specify a valid integer for the REAP_INTERVAL value")
	}

	reaperMinAgeString := os.Getenv("REAP_MIN_AGE")

	if reaperMinAgeString == "" {
		shipyard.LogError.Fatal("You must specifiy the REAP_MIN_AGE environment variable")
	}

	reaperMinAge, err := strconv.Atoi(reaperMinAgeString)

	if err != nil {
		shipyard.LogError.Fatal("You must specify a valid integer for the REAP_MIN_AGE value")
	}

	selfBaseURL := os.Getenv("SELF_BASE_URL")

	if selfBaseURL == "" {
		shipyard.LogError.Fatal("You must specifiy the SELF_BASE_URL environment variable")
	}

	//start the reaper process in the background

	minTime := time.Duration(reaperMinAge) * time.Second
	reapInterval := time.Duration(reaperInterval) * time.Second

	shipyard.LogInfo.Printf("Starting background reaper process. Reper will remove images older than %f second, and will run every %f seconds ", minTime.Seconds(), reapInterval.Seconds())

	//start the reap interval
	go shipyard.ReapForever(minTime, imageCreator, reapInterval)

	shipyard.LogInfo.Printf("Successfully configured server and validated configuration. Starting server.")

	server := server.NewServer(imageCreator, podSpec, selfBaseURL)

	server.Start(port, time.Duration(timeout)*time.Second)
}

package main

import (
	"os"
	"strconv"
	"time"

	"github.com/30x/kiln/pkg/kiln"
	"github.com/30x/kiln/pkg/server"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	kiln.LogInfo.Printf("Starting server configuration and validation...")

	portString := os.Getenv("PORT")

	if portString == "" {
		kiln.LogError.Fatal("You must specifiy the PORT environment variable")
	}

	port, err := strconv.Atoi(portString)

	if err != nil {
		kiln.LogError.Fatal("You must specify a valid integer for the PORT value")
	}

	kiln.LogInfo.Printf("PORT accepted: %d", port)

	timeoutString := os.Getenv("SHUTDOWN_TIMEOUT")

	if timeoutString == "" {
		kiln.LogError.Fatal("You must specifiy the SHUTDOWN_TIMEOUT environment variable")
	}

	timeout, err := strconv.Atoi(timeoutString)

	if err != nil {
		kiln.LogError.Fatal("You must specify a valid integer for the SHUTDOWN_TIMEOUT value")
	}

	kiln.LogInfo.Printf("SHUTDOWN_TIMEOUT accepted: %d", timeout)

	imageCreator, err := kiln.NewImageCreatorFromEnv()

	//we should die here if we're unable to start
	if err != nil {
		kiln.LogError.Fatalf("Unable to create image creator %s", err)
	}

	kiln.LogInfo.Printf("ImageCreator set up.")

	clusterConfig, err := kiln.NewClusterConfigFromEnv()
	if err != nil {
		kiln.LogError.Fatalf("Unable to get cluster config: %s", err)
	}

	kiln.LogInfo.Printf("ClusterConfig set up.")

	//start the reaper process in the background
	if os.Getenv("NO_REAP") == "" {
		reaperIntervalString := os.Getenv("REAP_INTERVAL")

		if reaperIntervalString == "" {
			kiln.LogError.Fatal("You must specifiy the REAP_INTERVAL environment variable")
		}

		reaperInterval, err := strconv.Atoi(reaperIntervalString)

		if err != nil {
			kiln.LogError.Fatal("You must specify a valid integer for the REAP_INTERVAL value")
		}

		kiln.LogInfo.Printf("REAP_INTERVAL accepted: %d", reaperInterval)

		reaperMinAgeString := os.Getenv("REAP_MIN_AGE")

		if reaperMinAgeString == "" {
			kiln.LogError.Fatal("You must specifiy the REAP_MIN_AGE environment variable")
		}

		reaperMinAge, err := strconv.Atoi(reaperMinAgeString)

		if err != nil {
			kiln.LogError.Fatal("You must specify a valid integer for the REAP_MIN_AGE value")
		}

		kiln.LogInfo.Printf("REAP_MIN_AGE accepted: %d", reaperMinAge)

		minTime := time.Duration(reaperMinAge) * time.Second
		reapInterval := time.Duration(reaperInterval) * time.Second

		kiln.LogInfo.Printf("Starting background reaper process. Reper will remove images older than %f second, and will run every %f seconds ", minTime.Seconds(), reapInterval.Seconds())
		//start the reap interval
		go kiln.ReapForever(minTime, imageCreator, reapInterval)
	}

	kiln.LogInfo.Printf("Successfully configured server and validated configuration. Starting server.")

	server := server.NewServer(imageCreator, clusterConfig)

	server.Start(port, time.Duration(timeout)*time.Second)
}

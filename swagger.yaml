---
swagger: '2.0'
info:
  version: 0.0.0
  title: Additional APIs for building for and deploying to Kubernetes.
basePath: /api/v1
consumes:
  - application/json
  - multipart/form-data
produces:
  - application/json
paths:
  /images:
    post:
      description: Create a new image
      operationId: createImage
      parameters:
        - $ref: '#/parameters/buildSources'
        - $ref: '#/parameters/repository'
        - $ref: '#/parameters/application'
        - $ref: '#/parameters/revision'
      responses:
        200:
          description: The build was successfully created
          schema:
            $ref: '#/definitions/Build'
        400:
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Image exists
          schema:
            $ref: '#/definitions/Error'
      tags:
        - image
  /images/{repo}:
    get:
      description: Get all applications in the repository
      operationId: getApplications
      responses:
        200:
          description: The request was for a repository and applications exist within that repository
          schema:
            type: array
            items:
              $ref: '#/definitions/Application'
        404:
          description: The request was for a repository that does not exist
          schema:
            $ref: '#/definitions/Error'
      tags:
        - image
    parameters:
      - name: repo
        in: path
        description: The repository id
        required: true
        type: string
  /images/{repo}/{application}:
    get:
      description: Get all revisions for the application in the repository
      operationId: getRevisions
      responses:
        200:
          description: The request was for a valid repository and application
          schema:
            type: array
            items:
              $ref: '#/definitions/Revision'
        404:
          description: The request was for a repository or application that does not exist
          schema:
            $ref: '#/definitions/Error'
      parameters:
      - name: repo
        in: path
        description: The repository id
        required: true
        type: string  
      - name: application
        in: path
        description: The Application
        required: true
        type: string 
      tags:
        - image
  /images/{repo}/{application}/{revision}:
    get:
      description: Get all revisions for the application in the repository
      operationId: getImage
      responses:
        200:
          description: The request was for a valid repository and application
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
        404:
          description: The request was for a repository or application that does not exist
          schema:
            $ref: '#/definitions/Error'
      tags:
        - image
    parameters:
      - name: repo
        in: path
        description: The repository id
        required: true
        type: string  
      - name: application
        in: path
        description: The Application name
        required: true
        type: string  
      - name: revision
        in: path
        description: The Revision
        required: true
        type: string
  /deployments/{repo}:
    get:
      description: Get all deployments for this repository
      operationId: getDeployemnts
      responses:
        200:
          description: The request was for a repository and applications exist within that repository
          schema:
            type: array
            items:
              $ref: '#/definitions/Deployment'
        404:
          description: The request was for a repository that does not exist
          schema:
            $ref: '#/definitions/Error'
    parameters:
      - name: repo
        in: path
        description: The repository id
        required: true
        type: string
  /deployments/{repo}/{application}:
    get:
      description: Get all deployed revisions for the application in the repository
      operationId: getDeployedRevisions
      responses:
        200:
          description: The request was for a valid repository and application
          schema:
            type: array
            items:
              $ref: '#/definitions/Deployment'
        404:
          description: The request was for a repository or application that does not exist
          schema:
            $ref: '#/definitions/Error'
    parameters:
      - name: repo
        in: path
        description: The repository id
        required: true
        type: string  
      - name: application
        in: path
        description: The Application
        required: true
        type: string 
  /deployments/{repo}/{application}/{revision}:
    get:
      description: Get all deployment for the specfied revision of the application within the repo
      operationId: getImageDeployments
      responses:
        200:
          description: The request was for a valid repository and application and revision
          schema:
            $ref: '#/definitions/Deployment'
              
        404:
          description: The request was for a repository or application that does not exist
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Create or update a deploment of the specified revision
      operationId: createOrUpdate deployment
      responses:
        200:
          description: The request was for a valid repo, application, and image
          schema:
            $ref: '#/definitions/Deployment'
        404:
          description: The revision does not exist
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Unable to deploy the application
          schema:
            $ref: '#/definitions/Error'
      parameters:
      - name: count
        in: body
        description: The number of images to deploy
        required: true
        schema:
          type: integer
       
    parameters:
    - name: repo
      in: path
      description: The repository id
      required: true
      type: string  
    - name: application
      in: path
      description: The Application name
      required: true
      type: string  
    - name: revision
      in: path
      description: The Revision
      required: true
      type: string  
   
      
definitions:
  Build:
    description: Object that describes a build.
    allOf:
      - $ref: '#/definitions/Links'
    type: object
    properties:
      imageUrl:
        description: The URL to the created image for retrieval via GET
        type: string
      image:
        description: The Docker image details *(Only available after a successful build)*
        type: object
        # We could fill this in with the Docker image schema but for now, let's not.
      logs:
        description: The log output from the build
        type: array
        items:
          type: string
    required:
      - imageUrl
      - logs
      # _links will have a 'self' link and an 'image' link when the build completes successfully
      - _links
      
  Application:
    description: An application.
    allOf:
      - $ref: '#/definitions/Links'
    type: object
    properties:
      name:
        type: string
    required:
      - name
      # _links will have a 'self' link and an 'image' link when the build completes successfully
      - _links   
  Revision:
    description: A revision of an application.
    allOf:
      - $ref: '#/definitions/Links'
    type: object
    properties:
      revision:
        type: string
    required:
      - revision
      # _links will have a 'self' link and an 'image' link when the build completes successfully
      - _links
  Image:
    description: An image of an applicatio and revision
    allOf:
      - $ref: '#/definitions/Links'
    type: object
    properties:
      created:
        description: The timestamp the image was created
        type: string
        format: date-time
      size:
        description: The size of the image, in bytes
        type: integer
      imageId:
        description: The docker image id SHA
        type: string
    required:
      - created
      - size
      - imageId
      # _links will have a 'self' link and an 'image' link when the build completes successfully
      - _links
      
  Deployment:
    description: Object that describes a deployment.
    allOf:
      - $ref: '#/definitions/Links'
    type: object
    properties:
      controller:
        description: The deployed replication controller
        type: string
      # I have no idea what we'd actually return here as it could be pods, services, rc and/or a mix of them
      logs:
        description: The log output from the deployment
        type: array
        items:
          type: string
    required:
      - controller
      - logs
      # _links will have a 'self' link and an 'deployables' link when the build completes successfully
      - _links
  Error:
    description: Object used for all API errors.
    type: object
    properties:
      message:
        type: string
      logs:
        type: array
        items:
          type: string
    required:
      - message
  Links:
    description: Object used to wrap resource links.
    type: object
    properties:
      _links:
        description: Container for any number of named resource links.
        type: object
        additionalProperties:
          description: A resource link.
          type: object
          properties:
            href:
              description: The link to the resource.
              format: uri
              type: string
          required:
            - href
    required:
      - _links
parameters:
  buildSources:
    name: sources
    in: formData
    description: The sources to use for the build
    required: true
    type: file
  repository:
    name: repository
    in: formData
    description: The Docker repository name
    required: true
    type: string
  application:
    name: application
    in: formData
    description: The Application name
    required: true
    type: string
  revision:
    name: revision
    in: formData
    description: The revision of the application
    required: true
    type: string  
tags:
  - name: build
    description: Build operations
  - name: deploy
    description: Deploy operation
